package com.example.projeto;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

import java.util.Stack;

public class MainActivity extends AppCompatActivity {

    private TextView saida;
    private StringBuilder input = new StringBuilder();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main); // Certifique-se de que está usando o nome correto do XML

        saida = findViewById(R.id.saida);

        int[] buttonIds = {
                R.id.button_0, R.id.button_1, R.id.button_2, R.id.button_3,
                R.id.button_4, R.id.button_5, R.id.button_6, R.id.button_7,
                R.id.button_8, R.id.button_9, R.id.button_add, R.id.button_subtract,
                R.id.button_multiply, R.id.button_divide, R.id.button_equals, R.id.button_clear
        };

        // Configura os listeners para os botões
        for (int id : buttonIds) {
            Button btn = findViewById(id);
            if (btn != null) {
                btn.setOnClickListener(this::onButtonClick);
            }
        }
    }

    // Método que é chamado quando um botão é clicado
    private void onButtonClick(View v) {
        Button btn = (Button) v;
        String text = btn.getText().toString();

        if (text.equals("=")) {
            // Quando o botão de "=" é pressionado, executa o cálculo
            try {
                String result = calculate(input.toString());
                saida.setText(result);  // Exibe o resultado na tela
                input.setLength(0);  // Limpa a entrada após o cálculo
                input.append(result); // Armazena o resultado para futuros cálculos
            } catch (Exception e) {
                saida.setText("Erro");
                input.setLength(0);
            }
        } else if (text.equals("⌫")) {
            // Se o botão "C" for pressionado, limpa a entrada e a tela
            input.setLength(0);
            saida.setText("");
        } else {
            // Caso contrário, adiciona o texto do botão na entrada
            input.append(text);
            saida.setText(input.toString());  // Exibe a expressão atual na tela
        }
    }

    // Função para realizar o cálculo da expressão
    private String calculate(String expression) {
        // Usando a classe Stack para resolver a expressão de maneira simples
        Stack<Double> numbers = new Stack<>();
        Stack<Character> operators = new Stack<>();
        StringBuilder currentNumber = new StringBuilder();

        // Função para processar o número atual
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);

            if (Character.isDigit(c)) {
                currentNumber.append(c);
            } else if (c == '.' || c == '+' || c == '-' || c == '*' || c == '/') {
                if (currentNumber.length() > 0) {
                    numbers.push(Double.parseDouble(currentNumber.toString()));
                    currentNumber.setLength(0);
                }
                if (operators.isEmpty() || precedence(c) > precedence(operators.peek())) {
                    operators.push(c);
                } else {
                    while (!operators.isEmpty() && precedence(c) <= precedence(operators.peek())) {
                        applyOperator(numbers, operators.pop());
                    }
                    operators.push(c);
                }
            }
        }

        if (currentNumber.length() > 0) {
            numbers.push(Double.parseDouble(currentNumber.toString()));
        }

        while (!operators.isEmpty()) {
            applyOperator(numbers, operators.pop());
        }

        return String.valueOf(numbers.pop());
    }

    // Função para definir a precedência dos operadores
    private int precedence(char operator) {
        if (operator == '+' || operator == '-') {
            return 1;
        } else if (operator == '*' || operator == '/') {
            return 2;
        }
        return 0;
    }

    // Função para aplicar o operador na pilha de números
    private void applyOperator(Stack<Double> numbers, char operator) {
        double b = numbers.pop();
        double a = numbers.pop();
        double result = 0;

        switch (operator) {
            case '+':
                result = a + b;
                break;
            case '-':
                result = a - b;
                break;
            case '*':
                result = a * b;
                break;
            case '/':
                if (b != 0) {
                    result = a / b;
                } else {
                    throw new ArithmeticException("Divisão por zero");
                }
                break;
        }

        numbers.push(result);
    }
}
